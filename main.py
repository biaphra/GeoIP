#!/usr/bin/env python3
"""
GeoIP Analyzer - Menu Interativo
Sistema de Geolocaliza√ß√£o de IP para Analistas de Seguran√ßa
Desenvolvido por Biaphra Araujo
"""

import os
import sys
from typing import List
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.text import Text
from rich.layout import Layout
from rich.live import Live
import json

from geoip_analyzer import GeoIPAnalyzer

console = Console()

class GeoIPMenu:
    """Interface de menu interativo para o GeoIP Analyzer"""
    
    def __init__(self):
        self.analyzer = GeoIPAnalyzer()
        self.running = True
    
    def show_banner(self):
        """Exibe o banner do sistema"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     GeoIP Analyzer v1.0                     ‚ïë
‚ïë              Sistema de Geolocaliza√ß√£o de IP                ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Desenvolvido por: Biaphra Araujo                          ‚ïë
‚ïë  Suporte: IPv4 e IPv6 | M√∫ltiplas APIs | Alta Precis√£o     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        console.print(banner, style="bold cyan")
    
    def show_menu(self):
        """Exibe o menu principal"""
        menu_panel = Panel(
            """[bold white]MENU PRINCIPAL[/bold white]

[bold green]1.[/bold green] Analisar IP √∫nico
[bold green]2.[/bold green] An√°lise em lote (m√∫ltiplos IPs)
[bold green]3.[/bold green] Hist√≥rico de consultas
[bold green]4.[/bold green] Exportar resultados
[bold green]5.[/bold green] Configura√ß√µes
[bold green]6.[/bold green] Sobre o sistema
[bold red]0.[/bold red] Sair

[dim]Digite o n√∫mero da op√ß√£o desejada:[/dim]""",
            title="üåç GeoIP Analyzer",
            border_style="blue"
        )
        console.print(menu_panel)
    
    def analyze_single_ip(self):
        """Analisa um √∫nico endere√ßo IP"""
        console.print("\n[bold blue]‚ïê‚ïê‚ïê AN√ÅLISE DE IP √öNICO ‚ïê‚ïê‚ïê[/bold blue]")
        
        while True:
            ip = Prompt.ask("\n[yellow]Digite o endere√ßo IP (IPv4 ou IPv6)[/yellow]")
            
            if ip.lower() in ['sair', 'exit', 'voltar']:
                break
            
            if not ip.strip():
                console.print("[red]‚ùå IP n√£o pode estar vazio![/red]")
                continue
            
            # Pergunta sobre usar m√∫ltiplas fontes
            use_multiple = Confirm.ask(
                "\n[cyan]Usar m√∫ltiplas APIs para maior precis√£o?[/cyan]",
                default=True
            )
            
            console.print(f"\n[green]üîç Analisando IP: {ip}[/green]")
            
            result = self.analyzer.analyze_ip(ip, use_multiple_sources=use_multiple)
            
            if result['success']:
                self.display_ip_result(result)
                
                # Pergunta se quer analisar outro IP
                if not Confirm.ask("\n[cyan]Analisar outro IP?[/cyan]", default=False):
                    break
            else:
                console.print(f"\n[red]‚ùå Erro: {result['error']}[/red]")
                
                if not Confirm.ask("\n[cyan]Tentar outro IP?[/cyan]", default=True):
                    break
    
    def display_ip_result(self, result: dict):
        """Exibe o resultado da an√°lise de IP em formato tabular"""
        
        # Tabela principal com informa√ß√µes de localiza√ß√£o
        table = Table(title=f"üìç Geolocaliza√ß√£o do IP: {result['ip']}", show_header=True)
        table.add_column("Campo", style="cyan", width=20)
        table.add_column("Valor", style="white", width=40)
        
        # Dados b√°sicos
        table.add_row("üåç Pa√≠s", result.get('country', 'N/A'))
        table.add_row("üè¥ C√≥digo do Pa√≠s", result.get('country_code', 'N/A'))
        table.add_row("üèõÔ∏è Regi√£o/Estado", result.get('region', 'N/A'))
        table.add_row("üèôÔ∏è Cidade", result.get('city', 'N/A'))
        table.add_row("üìç Latitude", result.get('latitude', 'N/A'))
        table.add_row("üìç Longitude", result.get('longitude', 'N/A'))
        table.add_row("üåê ISP", result.get('isp', 'N/A'))
        table.add_row("üè¢ Organiza√ß√£o", result.get('organization', 'N/A'))
        table.add_row("üïê Timezone", result.get('timezone', 'N/A'))
        
        # Informa√ß√µes adicionais se dispon√≠veis
        if 'zip_code' in result:
            table.add_row("üìÆ CEP", result.get('zip_code', 'N/A'))
        if 'as_number' in result:
            table.add_row("üî¢ AS Number", result.get('as_number', 'N/A'))
        
        # Informa√ß√µes de confian√ßa
        if 'confidence' in result:
            table.add_row("‚úÖ Confian√ßa", result.get('confidence', 'N/A'))
        if 'sources' in result:
            sources = ', '.join(result['sources'])
            table.add_row("üìä Fontes", sources)
        
        console.print(table)
        
        # Links √∫teis
        lat = result.get('latitude', '')
        lon = result.get('longitude', '')
        
        if lat != 'N/A' and lon != 'N/A':
            google_maps = f"https://www.google.com/maps?q={lat},{lon}"
            console.print(f"\n[blue]üó∫Ô∏è  Google Maps: {google_maps}[/blue]")
        
        # Informa√ß√µes de seguran√ßa
        if self.analyzer.is_private_ip(result['ip']):
            console.print("\n[yellow]‚ö†Ô∏è  IP Privado detectado[/yellow]")
        
        # Exibe dados brutos se m√∫ltiplas fontes
        if 'all_results' in result and len(result['all_results']) > 1:
            if Confirm.ask("\n[cyan]Exibir dados detalhados de todas as fontes?[/cyan]", default=False):
                self.show_detailed_sources(result['all_results'])
    
    def show_detailed_sources(self, all_results: List[dict]):
        """Exibe dados detalhados de todas as fontes"""
        for i, source_result in enumerate(all_results, 1):
            console.print(f"\n[bold yellow]‚ïê‚ïê‚ïê Fonte {i}: {source_result['source']} ‚ïê‚ïê‚ïê[/bold yellow]")
            
            table = Table(show_header=True)
            table.add_column("Campo", style="cyan")
            table.add_column("Valor", style="white")
            
            for key, value in source_result.items():
                if key not in ['success', 'source', 'raw_data', 'all_results']:
                    table.add_row(key.replace('_', ' ').title(), str(value))
            
            console.print(table)
    
    def analyze_batch_ips(self):
        """Analisa m√∫ltiplos IPs em lote"""
        console.print("\n[bold blue]‚ïê‚ïê‚ïê AN√ÅLISE EM LOTE ‚ïê‚ïê‚ïê[/bold blue]")
        
        # Op√ß√µes de entrada
        console.print("\n[yellow]Op√ß√µes de entrada:[/yellow]")
        console.print("1. Digite IPs manualmente (separados por v√≠rgula)")
        console.print("2. Carregar de arquivo de texto")
        
        option = Prompt.ask("\nEscolha uma op√ß√£o", choices=["1", "2"], default="1")
        
        ips = []
        
        if option == "1":
            ip_input = Prompt.ask("\n[yellow]Digite os IPs separados por v√≠rgula[/yellow]")
            ips = [ip.strip() for ip in ip_input.split(',') if ip.strip()]
        
        elif option == "2":
            filename = Prompt.ask("\n[yellow]Nome do arquivo (deve estar no diret√≥rio atual)[/yellow]")
            filepath = f"/Users/biaphraaraujo/Documents/Python/GeoIP/{filename}"
            
            try:
                with open(filepath, 'r') as f:
                    ips = [line.strip() for line in f if line.strip()]
                console.print(f"[green]‚úÖ Carregados {len(ips)} IPs do arquivo[/green]")
            except FileNotFoundError:
                console.print(f"[red]‚ùå Arquivo n√£o encontrado: {filepath}[/red]")
                return
            except Exception as e:
                console.print(f"[red]‚ùå Erro ao ler arquivo: {e}[/red]")
                return
        
        if not ips:
            console.print("[red]‚ùå Nenhum IP v√°lido fornecido![/red]")
            return
        
        # Confirma a an√°lise
        if not Confirm.ask(f"\n[cyan]Analisar {len(ips)} endere√ßos IP?[/cyan]", default=True):
            return
        
        # Executa an√°lise em lote
        results = self.analyzer.analyze_batch(ips)
        
        # Exibe resumo
        self.show_batch_summary(results)
        
        # Pergunta sobre exportar
        if Confirm.ask("\n[cyan]Exportar resultados para arquivo JSON?[/cyan]", default=True):
            filepath = self.analyzer.export_results(results)
            console.print(f"[green]‚úÖ Resultados exportados para: {filepath}[/green]")
    
    def show_batch_summary(self, results: List[dict]):
        """Exibe resumo da an√°lise em lote"""
        successful = [r for r in results if r.get('success', False)]
        failed = [r for r in results if not r.get('success', False)]
        
        # Estat√≠sticas
        stats_table = Table(title="üìä Resumo da An√°lise em Lote")
        stats_table.add_column("M√©trica", style="cyan")
        stats_table.add_column("Valor", style="white")
        
        stats_table.add_row("Total de IPs", str(len(results)))
        stats_table.add_row("Sucessos", f"[green]{len(successful)}[/green]")
        stats_table.add_row("Falhas", f"[red]{len(failed)}[/red]")
        stats_table.add_row("Taxa de Sucesso", f"{len(successful)/len(results)*100:.1f}%")
        
        console.print(stats_table)
        
        # Resultados bem-sucedidos
        if successful:
            console.print("\n[bold green]‚úÖ IPs Analisados com Sucesso:[/bold green]")
            
            results_table = Table()
            results_table.add_column("IP", style="cyan")
            results_table.add_column("Pa√≠s", style="white")
            results_table.add_column("Cidade", style="white")
            results_table.add_column("ISP", style="yellow")
            
            for result in successful[:10]:  # Mostra apenas os primeiros 10
                results_table.add_row(
                    result['ip'],
                    result.get('country', 'N/A'),
                    result.get('city', 'N/A'),
                    result.get('isp', 'N/A')[:30] + "..." if len(result.get('isp', '')) > 30 else result.get('isp', 'N/A')
                )
            
            console.print(results_table)
            
            if len(successful) > 10:
                console.print(f"[dim]... e mais {len(successful) - 10} resultados[/dim]")
        
        # Falhas
        if failed:
            console.print("\n[bold red]‚ùå IPs com Falha:[/bold red]")
            
            for result in failed:
                console.print(f"  ‚Ä¢ {result.get('ip', 'N/A')}: {result.get('error', 'Erro desconhecido')}")
    
    def show_history(self):
        """Exibe o hist√≥rico de consultas"""
        console.print("\n[bold blue]‚ïê‚ïê‚ïê HIST√ìRICO DE CONSULTAS ‚ïê‚ïê‚ïê[/bold blue]")
        
        history = self.analyzer.get_history()
        
        if not history:
            console.print("[yellow]üìù Nenhuma consulta no hist√≥rico[/yellow]")
            return
        
        # Tabela do hist√≥rico
        history_table = Table(title=f"üìã √öltimas {len(history)} Consultas")
        history_table.add_column("Data/Hora", style="cyan")
        history_table.add_column("IP", style="white")
        history_table.add_column("Pa√≠s", style="green")
        history_table.add_column("Cidade", style="yellow")
        history_table.add_column("Status", style="white")
        
        for entry in reversed(history[-20:]):  # √öltimas 20 consultas
            timestamp = entry['timestamp'].strftime("%d/%m/%Y %H:%M:%S")
            result = entry['result']
            
            status = "‚úÖ Sucesso" if result.get('success') else "‚ùå Falha"
            country = result.get('country', 'N/A') if result.get('success') else 'N/A'
            city = result.get('city', 'N/A') if result.get('success') else 'N/A'
            
            history_table.add_row(timestamp, entry['ip'], country, city, status)
        
        console.print(history_table)
        
        # Op√ß√µes do hist√≥rico
        console.print("\n[yellow]Op√ß√µes:[/yellow]")
        console.print("1. Ver detalhes de uma consulta")
        console.print("2. Exportar hist√≥rico")
        console.print("3. Limpar hist√≥rico")
        console.print("0. Voltar")
        
        option = Prompt.ask("\nEscolha uma op√ß√£o", choices=["0", "1", "2", "3"], default="0")
        
        if option == "1":
            self.show_history_details(history)
        elif option == "2":
            self.export_history(history)
        elif option == "3":
            if Confirm.ask("[red]Tem certeza que deseja limpar o hist√≥rico?[/red]", default=False):
                self.analyzer.clear_history()
                console.print("[green]‚úÖ Hist√≥rico limpo com sucesso[/green]")
    
    def show_history_details(self, history: List[dict]):
        """Exibe detalhes de uma consulta espec√≠fica do hist√≥rico"""
        if not history:
            return
        
        # Lista IPs para sele√ß√£o
        console.print("\n[yellow]Consultas dispon√≠veis:[/yellow]")
        for i, entry in enumerate(reversed(history[-10:]), 1):
            timestamp = entry['timestamp'].strftime("%d/%m/%Y %H:%M:%S")
            console.print(f"{i}. {entry['ip']} - {timestamp}")
        
        try:
            choice = int(Prompt.ask("\nN√∫mero da consulta")) - 1
            if 0 <= choice < min(10, len(history)):
                selected_entry = list(reversed(history[-10:]))[choice]
                console.print(f"\n[bold green]Detalhes da consulta: {selected_entry['ip']}[/bold green]")
                self.display_ip_result(selected_entry['result'])
            else:
                console.print("[red]‚ùå N√∫mero inv√°lido[/red]")
        except (ValueError, IndexError):
            console.print("[red]‚ùå Entrada inv√°lida[/red]")
    
    def export_history(self, history: List[dict]):
        """Exporta o hist√≥rico para arquivo"""
        if not history:
            console.print("[yellow]üìù Nenhum hist√≥rico para exportar[/yellow]")
            return
        
        filename = Prompt.ask(
            "\n[yellow]Nome do arquivo (sem extens√£o)[/yellow]",
            default="historico_geoip"
        )
        
        filepath = self.analyzer.export_results(
            [entry['result'] for entry in history],
            f"{filename}.json"
        )
        
        console.print(f"[green]‚úÖ Hist√≥rico exportado para: {filepath}[/green]")
    
    def show_settings(self):
        """Exibe configura√ß√µes do sistema"""
        console.print("\n[bold blue]‚ïê‚ïê‚ïê CONFIGURA√á√ïES ‚ïê‚ïê‚ïê[/bold blue]")
        
        settings_panel = Panel(
            """[bold white]APIs Dispon√≠veis:[/bold white]

[green]‚úÖ HackerTarget[/green] - API principal (gratuita)
[green]‚úÖ IP-API[/green] - API secund√°ria (gratuita)
[green]‚úÖ IPInfo[/green] - API terci√°ria (gratuita)

[bold white]Funcionalidades:[/bold white]
‚Ä¢ Suporte IPv4 e IPv6
‚Ä¢ An√°lise com m√∫ltiplas fontes
‚Ä¢ Consolida√ß√£o inteligente de resultados
‚Ä¢ C√°lculo de confian√ßa
‚Ä¢ Exporta√ß√£o JSON
‚Ä¢ Hist√≥rico de consultas

[bold white]Rate Limiting:[/bold white]
‚Ä¢ 1 segundo entre consultas em lote
‚Ä¢ 0.5 segundos entre APIs
‚Ä¢ Timeout de 10 segundos por consulta""",
            title="‚öôÔ∏è Configura√ß√µes do Sistema",
            border_style="green"
        )
        
        console.print(settings_panel)
    
    def show_about(self):
        """Exibe informa√ß√µes sobre o sistema"""
        console.print("\n[bold blue]‚ïê‚ïê‚ïê SOBRE O SISTEMA ‚ïê‚ïê‚ïê[/bold blue]")
        
        about_panel = Panel(
            """[bold white]GeoIP Analyzer v1.0[/bold white]

[bold cyan]Desenvolvido por:[/bold cyan] Biaphra Araujo
[bold cyan]Especialidade:[/bold cyan] Seguran√ßa Cibern√©tica & An√°lise de Infraestrutura

[bold white]Funcionalidades:[/bold white]
‚Ä¢ Geolocaliza√ß√£o precisa de endere√ßos IPv4 e IPv6
‚Ä¢ M√∫ltiplas APIs para maior confiabilidade
‚Ä¢ Interface interativa e intuitiva
‚Ä¢ An√°lise em lote para grandes volumes
‚Ä¢ Exporta√ß√£o de resultados
‚Ä¢ Hist√≥rico de consultas
‚Ä¢ Valida√ß√£o rigorosa de entrada

[bold white]Casos de Uso:[/bold white]
‚Ä¢ An√°lise forense digital
‚Ä¢ Investiga√ß√£o de incidentes de seguran√ßa
‚Ä¢ Monitoramento de tr√°fego suspeito
‚Ä¢ Auditoria de infraestrutura
‚Ä¢ Threat intelligence

[bold white]APIs Utilizadas:[/bold white]
‚Ä¢ HackerTarget GeoIP API
‚Ä¢ IP-API.com
‚Ä¢ IPInfo.io

[dim]Sistema desenvolvido para analistas de seguran√ßa cibern√©tica[/dim]""",
            title="‚ÑπÔ∏è Sobre o GeoIP Analyzer",
            border_style="cyan"
        )
        
        console.print(about_panel)
    
    def run(self):
        """Executa o menu principal"""
        try:
            while self.running:
                console.clear()
                self.show_banner()
                self.show_menu()
                
                choice = Prompt.ask("\n[bold cyan]Sua escolha[/bold cyan]", choices=["0", "1", "2", "3", "4", "5", "6"])
                
                if choice == "0":
                    console.print("\n[bold green]üëã Obrigado por usar o GeoIP Analyzer![/bold green]")
                    self.running = False
                
                elif choice == "1":
                    self.analyze_single_ip()
                    Prompt.ask("\n[dim]Pressione Enter para continuar...[/dim]")
                
                elif choice == "2":
                    self.analyze_batch_ips()
                    Prompt.ask("\n[dim]Pressione Enter para continuar...[/dim]")
                
                elif choice == "3":
                    self.show_history()
                    Prompt.ask("\n[dim]Pressione Enter para continuar...[/dim]")
                
                elif choice == "4":
                    history = self.analyzer.get_history()
                    if history:
                        self.export_history(history)
                    else:
                        console.print("\n[yellow]üìù Nenhum hist√≥rico para exportar[/yellow]")
                    Prompt.ask("\n[dim]Pressione Enter para continuar...[/dim]")
                
                elif choice == "5":
                    self.show_settings()
                    Prompt.ask("\n[dim]Pressione Enter para continuar...[/dim]")
                
                elif choice == "6":
                    self.show_about()
                    Prompt.ask("\n[dim]Pressione Enter para continuar...[/dim]")
        
        except KeyboardInterrupt:
            console.print("\n\n[yellow]‚ö†Ô∏è Interrompido pelo usu√°rio[/yellow]")
        except Exception as e:
            console.print(f"\n[red]‚ùå Erro inesperado: {e}[/red]")
        finally:
            console.print("\n[bold blue]Sistema finalizado.[/bold blue]")

def main():
    """Fun√ß√£o principal"""
    menu = GeoIPMenu()
    menu.run()

if __name__ == "__main__":
    main()
